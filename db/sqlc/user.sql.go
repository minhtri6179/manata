// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (
        user_name,
        hashed_password,
        first_name,
        last_name,
        date_of_birth,
        email
    )
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_name, hashed_password, first_name, last_name, date_of_birth, email, created_at
`

type CreateUserParams struct {
	UserName       string
	HashedPassword string
	FirstName      string
	LastName       string
	DateOfBirth    pgtype.Timestamp
	Email          string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserName,
		arg.HashedPassword,
		arg.FirstName,
		arg.LastName,
		arg.DateOfBirth,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM "user"
WHERE user_name = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userName string) error {
	_, err := q.db.Exec(ctx, deleteUser, userName)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_name, hashed_password, first_name, last_name, date_of_birth, email, created_at
FROM "user"
WHERE user_name = $1
`

func (q *Queries) GetUser(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, userName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserName,
		&i.HashedPassword,
		&i.FirstName,
		&i.LastName,
		&i.DateOfBirth,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE "user"
SET email = $1,
    first_name = $2,
    last_name = $3
WHERE user_name = $4
`

type UpdateUserParams struct {
	Email     string
	FirstName string
	LastName  string
	UserName  string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.UserName,
	)
	return err
}
