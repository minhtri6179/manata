// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: item.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO task (
        title,
        description,
        image,
        status
    )
VALUES ($1, $2, $3, $4)
RETURNING id, title, description, image, status, created_at, updated_at
`

type CreateTaskParams struct {
	Title       string
	Description pgtype.Text
	Image       []byte
	Status      NullStatus
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.Title,
		arg.Description,
		arg.Image,
		arg.Status,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :one
DELETE FROM task
WHERE id = $1
RETURNING id, title, description, image, status, created_at, updated_at
`

func (q *Queries) DeleteTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, deleteTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getTask = `-- name: GetTask :one
SELECT id, title, description, image, status, created_at, updated_at
FROM task
WHERE id = $1
`

func (q *Queries) GetTask(ctx context.Context, id int32) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Image,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, title, description, image, status, created_at, updated_at
FROM task
ORDER BY id ASC
LIMIT $1 OFFSET $2
`

type ListTasksParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Image,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE task
SET title = $1,
    description = $2,
    status = $3
WHERE id = $4
RETURNING id, title, description, image, status, created_at, updated_at
`

type UpdateStatusParams struct {
	Title       string
	Description pgtype.Text
	Status      NullStatus
	ID          int32
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.Exec(ctx, updateStatus,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.ID,
	)
	return err
}
